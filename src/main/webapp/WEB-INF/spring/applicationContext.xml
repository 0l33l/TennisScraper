<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
       default-autowire="byName">

    <context:annotation-config/>

    <context:component-scan base-package="com.springhibernate.integration.*"/>
    <!--<context:component-scan base-package="com.springhibernate.integration.tennisParser;com.springhibernate.integration.repository;org.krams.tutorial"/>-->

    <!--Enables the use of @AspectJ style of aspects' declarations. AspectJ run-time isn't necessarily involved-->
    <aop:aspectj-autoproxy/>

    <!--Platform Transaction Manager declared as "transactionManager" will be used.-->
    <!--"aspectj" mode enables load-time/compile-time weaving of transactional methods, which enables
    those methods to be intercepted even when called internally.
    (Unlike Spring generated proxies which will only be intercepted when called from outside)-->
    <tx:annotation-driven mode="aspectj"/>


    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.c3p0.min_size">5</prop>
                <prop key="hibernate.c3p0.max_size">20</prop>
                <prop key="hibernate.c3p0.timeout">1800</prop>
                <prop key="hibernate.c3p0.max_statements">50</prop>
                <prop key="hibernate.c3p0.idle_test_period">10</prop>
                <prop key="hibernate.c3p0.acquire_increment">5</prop>
                <prop key="connection.provider_class">org.hibernate.connection.C3P0ConnectionProvider</prop>
                <prop key="show_sql">false</prop>
            </props>
        </property>
        <property name="annotatedClasses">
            <list>
                <value>com.springhibernate.integration.model.PriceComparison</value>
                <value>com.springhibernate.integration.model.Category</value>
                <value>com.springhibernate.integration.model.Image</value>
                <value>com.springhibernate.integration.model.Product</value>
                <value>com.springhibernate.integration.model.User</value>
            </list>
        </property>
    </bean>

    <bean id="hibernateTransactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <context:property-placeholder location="WEB-INF/properties/database.properties"/>

    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>


    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${database.driverClassName}"/>
        <property name="url" value="${database.url}"/>
        <property name="username" value="${database.username}"/>
        <property name="password" value="${database.password}"/>

        <property name="initialSize" value="${pool.initialSize}"/>
        <property name="minIdle" value="${pool.minIdle}"/>
        <property name="maxIdle" value="${pool.maxIdle}"/>
        <property name="maxActive" value="${pool.maxActive}"/>
        <!-- The maximum number of milliseconds that the pool will wait
          (when there are no available connections) for a connection to be
           returned before throwing an exception, or -1 to wait indefinitely.
        -->
        <property name="maxWait" value="${pool.maxWait}"/>

        <property name="testOnBorrow" value="true"/>

        <property name="validationQuery" value="${pool.validationQuery}"/>
        <property name="testWhileIdle" value="${pool.testWhileIdle}"/>

        <property name="timeBetweenEvictionRunsMillis" value="${pool.timeBetweenEvictionRunsMillis}"/>
        <property name="numTestsPerEvictionRun" value="${pool.numTestsPerEvictionRun}"/>
        <property name="minEvictableIdleTimeMillis" value="${pool.minEvictableIdleTimeMillis}"/>
    </bean>
</beans>